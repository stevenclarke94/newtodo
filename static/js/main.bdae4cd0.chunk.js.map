{"version":3,"sources":["components/Form.js","components/ToDo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","toDos","setToDos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","ToDo","todo","map","item","filter","el","ToDoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","filterHandler","getLocalTodos","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdae4cd0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({setInputText, toDos, setToDos, inputText, setStatus}) => {\r\n  //Here I can write javascript code and function\r\n  const inputTextHandler = (e) => {\r\n    console.log(e.target.value);\r\n    setInputText(e.target.value);\r\n  }\r\n  const submitToHandler = (e) => {\r\n    e.preventDefault();\r\n    setToDos([\r\n      ...toDos, { text: inputText, completed: false, id: Math.random() * 1000,}\r\n    ]);\r\n    setInputText(\"\");\r\n  }\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  }\r\n\r\nreturn(  \r\n    <form>\r\n    <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n    <button onClick={submitToHandler} className=\"todo-button\" type=\"submit\">\r\n      <i className=\"fas fa-plus-square\"></i>\r\n    </button>\r\n    <div className=\"select\">\r\n      <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n        <option value=\"all\">All</option>\r\n        <option value=\"completed\">Completed</option>\r\n        <option value=\"uncompleted\">Uncompleted</option>\r\n      </select>\r\n    </div>\r\n  </form>\r\n\r\n);\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst ToDo =({text, todo, toDos, setToDos}) =>{\r\n    const deleteHandler = () => {\r\n        setToDos(toDos.filter(el => el.id !== todo.id));\r\n        console.log(todo);\r\n    };\r\n\r\n    const completeHandler = () => {\r\n        setToDos(toDos.map((item) => {\r\n            if(item.id === todo.id){\r\n                return{\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    \r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={todo.completed ? \"completed\" : 'todo-item'}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from \"react\";\r\nimport ToDo from \"./ToDo\";\r\nconst ToDoList = ( { toDos, setToDos, filteredTodos }) => {\r\n\r\n    return(\r\n        <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n          {filteredTodos.map(todo => (\r\n              <ToDo \r\n              setToDos={setToDos} \r\n              toDos={toDos}\r\n              key = {todo.id}\r\n              todo = {todo}\r\n              text={todo.text}\r\n              \r\n              />\r\n          ))}\r\n      </ul>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [toDos, setToDos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    filterHandler();\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n  }, [toDos, status]);\n\n  const filterHandler = () =>{\n    switch(status){\n      case 'completed':\n        setFilteredTodos(toDos.filter(todo => todo.completed === true));\n        break;\n        case 'uncompleted':\n          setFilteredTodos(toDos.filter(todo => todo.completed === false));\n          break;\n          default: \n          setFilteredTodos(toDos);\n          break;\n    }\n  }\n  //save to local\n   const saveLocalTodos = () => {\n      localStorage.setItem('toDos', JSON.stringify(toDos));\n  };\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n    localStorage.setItem('toDos', JSON.stringify([]));\n    }else{\n    let todoLocal =  JSON.parse(localStorage.getItem(\"todos\"));\n     setToDos(todoLocal);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n    <header>\n      <h2>Stevens' Todo List</h2>\n    </header>\n    <Form \n    inputText = {inputText}\n    toDos = {toDos}\n    setToDos = {setToDos}\n    setInputText = {setInputText}\n    setStatus = {setStatus}\n    \n    />\n\n    <ToDoList setToDos={setToDos} \n    toDos={toDos}\n    filteredTodos={filteredTodos}\n    />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}